import java.util.List;

/**
 * Author: Jason Huang (yetianhuang.cs@gmail.com)
 */
public class GameNode {
    long mValue;
    GameNode mBestMove;
    GameNode mParent;
    BoardPosition mPositon;
    int mDepth;
    int mPlayer;

    public static final int MAX_PLAYER = 0;
    public static final int MIN_PLAYER = 1;

    /**
     * determine if game over. ONLY used in Midgame-Endgame.
     * @return true if one player wins; otherwise false.
     */
    public boolean isLeaf() {
        // TODO
        // one player has only two pieces.
        if (2 == mPositon.getNumWhitePieces() || 2 == mPositon.getNumBlackPieces()) {
            return true;
        }

        // one player has no any further moves.

        // the positions generated by a white move.
        List<BoardPosition> L = Generator.generateMovesMidgameEndgame(mPositon);
        if (L.isEmpty()) {
            return true;
        }

        // the positions generated by a black move.
        List<BoardPosition> L2 = Generator.generateMovesMidgameEndgameBlack(mPositon);
        if (L2.isEmpty()) {
            return true;
        }

        return false;
    }

    public void deriveFromParent(GameNode parent) {
        this.mParent = parent;
        this.mDepth = parent.mDepth + 1;
        this.mPlayer = (parent.mPlayer == MAX_PLAYER) ? MIN_PLAYER : MAX_PLAYER;
    }
}
